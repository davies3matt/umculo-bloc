# # This "input" configures a global authorization rule to enable public access to
# # all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User
  @model
  @auth(
    rules: [{ allow: groups, groups: ["User"], operations: [read, update] }]
  ) {
  id: ID!
  phoneNumber: String
  email: String
  name: String
  image: String
  groups: [Group] @manyToMany(relationName: "UserGroup")
  items: [Item] @hasMany(indexName: "UserItems", fields: ["id"])
  pendingGroups: [ID]
}

type Group
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["User"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  name: String
  type: GroupType
  users: [User] @manyToMany(relationName: "UserGroup")
  pendingUsers: [ID]
  items: [Item] @hasMany(indexName: "GroupItems", fields: ["id"])
  image: String
  description: String
}

type Item
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["User"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  groupId: ID! @index(name: "GroupItems", sortKeyFields: ["id"])
  userId: ID @index(name: "UserItems", sortKeyFields: ["id"])
  completedById: ID @index(name: "UserCompletedItems", sortKeyFields: ["id"])
  addedById: ID @index(name: "UserAddedItems", sortKeyFields: ["id"])
  name: String!
  category: Category!
  group: Group! @belongsTo(fields: ["groupId"])
  addedBy: User @belongsTo(fields: ["addedById"])
  assignedTo: User @belongsTo(fields: ["userId"])
  completedBy: User @belongsTo(fields: ["completedById"])
  status: ItemStatus!
  isArchived: Boolean
}

type Log
  @auth(
    rules: [
      {
        allow: groups
        groups: ["User"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  groupId: ID! @index(name: "GroupLogs", sortKeyFields: ["id"])
  userId: ID! @index(name: "UserLogs", sortKeyFields: ["id"])
  group: Group @belongsTo(fields: ["groupId"])
  user: User @belongsTo(fields: ["userId"])
}

enum Category {
  KITCHEN
  BATHROOM
  LIVING_AREA
}

enum GroupType {
  HOUSE_SHARE
  DIGS
  FAMILY
  COMMUNE
}

enum ItemStatus {
  PENDING
  DONE
}

input InviteDetails {
  email: String
  phoneNumber: String
}
type Mutation {
  inviteUsersToGroup(groupId: String, users: [InviteDetails]): Group
    @function(name: "customFunction-${env}")
    @auth(rules: [{ allow: groups, groups: ["User"] }])
  inviteResponse(groupId: String, accept: Boolean): Group
    @function(name: "customFunction-${env}")
    @auth(rules: [{ allow: groups, groups: ["User"] }])
  removeGroup(groupId: String): String
    @function(name: "customFunction-${env}")
    @auth(rules: [{ allow: groups, groups: ["User"] }])
}
type Query {
  getUserProfile: User
    @function(name: "customFunction-${env}")
    @auth(rules: [{ allow: groups, groups: ["User"] }])
}
